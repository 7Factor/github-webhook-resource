#!/usr/bin/env node
'use strict'

const fetch = require('node-fetch');
const env = process.env;
const stdin = process.stdin;

stdin.setEncoding('utf8');

let inputChunks = [];
stdin.on('data', function (chunk) {
    inputChunks.push(chunk);
});

stdin.on('end', function () {
    let inputJSON = inputChunks.join("");
    logInfo(`Received stdin: ${inputJSON}`);

    let parsedData;
    try {
        parsedData = JSON.parse(inputJSON);
    } catch(error) {
        logInfo('Error:', error.stack);
        process.exit(1);
    }

    let source = parsedData.source || {};
    let params = parsedData.params || {};

    // validate input

    let githubApi = source.github_api; 
    let githubToken = source.github_token;
    let org = params.org;
    let repo = params.repo;
    let githubUrl = `${githubApi}/repos/${org}/${repo}/hooks`;

    let resourceName = params.resource_name;
    let webhookToken = params.webhook_token;
    doWork(githubUrl, githubToken, resourceName, webhookToken);
});

async function doWork(githubUrl, githubToken, resourceName, webhookToken) {
    logInfo(`Using githubUrl: ${githubUrl}`);

    let url = `${env.ATC_EXTERNAL_URL}/teams/${env.BUILD_TEAM_NAME}/pipelines/${env.BUILD_PIPELINE_NAME}/resources/${resourceName}/check/webhook?webhook_token=${webhookToken}`;
    let urlLower = url.toLowerCase();
    let uri = encodeURI(urlLower);
    logInfo(`Setting Github webhook for ${uri}`);

    let config = { 
        'url': uri,
        'content-type': 'json'
    };
    
    let body = {
        'name': 'web',
        'config': config
    };
  
    const existingHooks = async () => {
        const response = await fetch(githubUrl, {
            method: 'GET',
            headers: {
                'Authorization': `token ${githubToken}`
            }
        });
        const json = await response.json();
        return json;
    };

    const existingHookList = await existingHooks();
    const existingHook = existingHookList.find(hook => hook.config.url == uri);

    if(existingHook != null) {
        emit(existingHook);
    } else {
        let bodyString = JSON.stringify(body);
        logInfo(`Fetching with request body: ${bodyString}`);
    
        fetch(githubUrl, {
            method: 'POST',
            body: bodyString,
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `token ${githubToken}`
            }
        }).then(res => {
            if (res.ok) {
                return res.json();
            } else {
                throw new Error(`Response Status: ${res.status} Response Status Text: ${res.statusText} \n Request Body: ${bodyString}`);
            }
        })
        .then(response => { 
            logInfo('Success:', JSON.stringify(response));
            emit(response);
        })
        .catch(error => {
            logInfo(error.stack);
            process.exit(1);
        });
    }
}

function emit(result) {
    let output = {
        version: {
            id: result.id.toString()
        }
    }
    logInfo(output);
    console.log(JSON.stringify(output, null, 2));
    process.exit(0);
}

function logInfo(message) {
    console.error(message);
}